(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{600:function(t,a,r){"use strict";r.r(a);var s=r(1),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"虚拟-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom"}},[t._v("#")]),t._v(" 虚拟 DOM")]),t._v(" "),a("h2",{attrs:{id:"什么是虚拟-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是虚拟-dom"}},[t._v("#")]),t._v(" 什么是虚拟 DOM")]),t._v(" "),a("p",[t._v("虚拟 DOM 是一个树状结构的 JS 对象， 用于模拟真实的 DOM 结构，优化渲染性能")]),t._v(" "),a("h2",{attrs:{id:"为什么需要虚拟-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要虚拟-dom"}},[t._v("#")]),t._v(" 为什么需要虚拟 DOM")]),t._v(" "),a("ul",[a("li",[t._v("避免直接操作 DOM，实现批量更新、最小更新")]),t._v(" "),a("li",[t._v("通过 diff 算法计算更新内容")]),t._v(" "),a("li",[t._v("实现跨端渲染")])]),t._v(" "),a("h2",{attrs:{id:"虚拟-dom-如何工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-如何工作"}},[t._v("#")]),t._v(" 虚拟 DOM 如何工作")]),t._v(" "),a("p",[t._v("通过 Diff 算法进行新旧虚拟 DOM 的对比，找出更新内容批量更新")]),t._v(" "),a("h2",{attrs:{id:"虚拟-dom-和-fiber-的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-和-fiber-的关系"}},[t._v("#")]),t._v(" 虚拟 DOM 和 Fiber 的关系")]),t._v(" "),a("p",[t._v("虚拟 DOM 的本质是用 JS 变量描述 DOM 结构，FIber 是"),a("strong",[t._v("实现虚拟 DOM 的一种方式")]),t._v("，这种实现方式下优化了 Diff 算法的机制")]),t._v(" "),a("ul",[a("li",[t._v("传统的虚拟 DOM 是使用树形对象")]),t._v(" "),a("li",[t._v("FIber 架构使用链表")])])])}),[],!1,null,null,null);a.default=v.exports}}]);