(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{593:function(e,t,s){"use strict";s.r(t);var a=s(1),v=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"hooks-相关问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hooks-相关问题"}},[e._v("#")]),e._v(" Hooks 相关问题")]),e._v(" "),t("h2",{attrs:{id:"为什么不能在条件分支中使用-hooks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么不能在条件分支中使用-hooks"}},[e._v("#")]),e._v(" 为什么不能在条件分支中使用 hooks")]),e._v(" "),t("p",[e._v("React 不会按照变量名匹配 state，而是依赖 Hooks 调用顺序来管理组件状态。")]),e._v(" "),t("p",[e._v("fiberNode 中通过一个链表来存储管理 hooks，每次渲染时会依次取出对应的 state（hooks 相关的数据）。如果调用顺序有变化（某个 hooks 被跳过），就会导致数据分配异常，导致 UI 异常")]),e._v(" "),t("p",[e._v("条件分支会导致顺序变化，从而破坏 React 的状态管理")]),e._v(" "),t("h2",{attrs:{id:"usestate-的更新是同步还是异步的-如果是异步的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usestate-的更新是同步还是异步的-如果是异步的"}},[e._v("#")]),e._v(" useState 的更新是同步还是异步的？如果是异步的")]),e._v(" "),t("p",[e._v("在 React 事件中触发时是异步的，会进行合并批量更新；")]),e._v(" "),t("p",[e._v("在原生事件中、setTimeout 等中触发，是同步的")]),e._v(" "),t("h2",{attrs:{id:"usereducer-和-usestate-的对比-和-redux-的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usereducer-和-usestate-的对比-和-redux-的对比"}},[e._v("#")]),e._v(" useReducer 和 useState 的对比，和 Redux 的对比")]),e._v(" "),t("p",[e._v("和 useState 对比：")]),e._v(" "),t("ul",[t("li",[e._v("useState 适用于简单、独立的状态。")]),e._v(" "),t("li",[e._v("useReducer 适用于维护多个相关状态，且需要通过复杂的逻辑来更新它们。")])]),e._v(" "),t("p",[e._v("和 Redux 对比：")]),e._v(" "),t("ul",[t("li",[e._v("useReducer 适用于"),t("strong",[e._v("局部的")]),e._v("复杂状态管理，是"),t("strong",[e._v("组件级别")]),e._v("的，不涉及跨组件共享")]),e._v(" "),t("li",[e._v("Redux 适用于"),t("strong",[e._v("全局的")]),e._v("复杂状态管理，是"),t("strong",[e._v("应用级")]),e._v("的。使用成本更高，需要引入额外的库")])]),e._v(" "),t("h2",{attrs:{id:"usememo-和-react-memo-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usememo-和-react-memo-有什么区别"}},[e._v("#")]),e._v(" useMemo 和 React.memo 有什么区别")]),e._v(" "),t("ul",[t("li",[e._v("React.memo 是一个 高阶组件，用于"),t("strong",[e._v("避免无效渲染，优化函数组件性能")]),e._v("。当组件的 props 没有变化时，跳过组件的渲染。可以提供自定义的 props 对比函数")]),e._v(" "),t("li",[e._v("useMemo 用于"),t("strong",[e._v("缓存计算结果")]),e._v("，只有在依赖项的值变化时才重新计算")])]),e._v(" "),t("h2",{attrs:{id:"usememo-和-usecallback-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usememo-和-usecallback-有什么区别"}},[e._v("#")]),e._v(" useMemo 和 useCallback 有什么区别")]),e._v(" "),t("p",[e._v("useCallback 用于缓存"),t("strong",[e._v("函数实例")]),e._v("，避免函数重复创建。减少不必要的重渲染（函数作为 props 传递给子组件时）")]),e._v(" "),t("p",[e._v("useCallback 实际上是 useMemo 的一个特化版本，专门用于存储函数。存储函数时建议用 useCallback，语义更清晰。")]),e._v(" "),t("h2",{attrs:{id:"usetransition-和-usedeferredvalue-解决了什么问题-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usetransition-和-usedeferredvalue-解决了什么问题-有什么区别"}},[e._v("#")]),e._v(" useTransition 和 useDeferredValue 解决了什么问题？有什么区别？")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("useTransition")]),e._v(" 是阻止 setState 这个动作的执行时机")]),e._v(" "),t("li",[t("code",[e._v("useDeferredValue")]),e._v(" 不阻止 setState 的执行时机，而是阻止值发生改变后，UI 更新的时机")]),e._v(" "),t("li",[t("code",[e._v("useTransition")]),e._v(" 可以获取当前是否处于 pending 状态，"),t("code",[e._v("useDeferredValue")]),e._v("不可以")])]),e._v(" "),t("p",[e._v("二者的适用场景：核心在于 setState 这个动作执行后，所有依赖变量 A 的更新都会卡顿，还是只有一部分会卡顿")]),e._v(" "),t("ul",[t("li",[e._v("如果是一部分，为了让其他依赖该变量且更新不会造成阻塞的组件正常更新，选择"),t("code",[e._v("useDeferredValue")]),e._v(" "),t("blockquote",[t("p",[e._v("所有依赖 A 的更新中，只在会造成卡顿的组件内使用 "),t("code",[e._v("useDeferredValue")]),e._v(" 即可")])])]),e._v(" "),t("li",[e._v("如果是全部，即 setState 这个动作本身就会导致卡顿，则选择 "),t("code",[e._v("useTransition")])])]),e._v(" "),t("h2",{attrs:{id:"useeffect-与-uselayouteffect-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useeffect-与-uselayouteffect-的区别"}},[e._v("#")]),e._v(" useEffect 与 useLayoutEffect 的区别")]),e._v(" "),t("ul",[t("li",[e._v("执行时机上：\n"),t("ul",[t("li",[e._v("useLayoutEffect 的执行时机更早，在"),t("strong",[e._v("DOM 变更后但绘制前")])]),e._v(" "),t("li",[e._v("useEffect 在"),t("strong",[e._v("绘制后")])])])]),e._v(" "),t("li",[e._v("对渲染的阻塞上：\n"),t("ul",[t("li",[e._v("useLayoutEffect 会阻塞渲染")]),e._v(" "),t("li",[e._v("useEffect 不会阻塞渲染")])])]),e._v(" "),t("li",[e._v("读取 DOM 操作时：二者拿到的都是更新后的 DOM")]),e._v(" "),t("li",[e._v("适用场景：\n"),t("ul",[t("li",[e._v("useLayoutEffect 适用于需要在绘制前同步处理 DOM，如测量 DOM、避免 UI 闪烁\n"),t("ul",[t("li",[e._v("如：组件渲染后，获取某个 DOM 元素的宽高或位置信息，并基于此调整布局。useLayoutEffect 内使用 setState 修改状态，会跳过前一次绘制阶段，直接进入重新渲染阶段")]),e._v(" "),t("li",[e._v("如果使用 useEffect 则会出现闪烁，因为执行时已经绘制完成")])])]),e._v(" "),t("li",[e._v("useEffect 适用于网络请求、订阅事件、操作非 UI 逻辑")])])])])])}),[],!1,null,null,null);t.default=v.exports}}]);